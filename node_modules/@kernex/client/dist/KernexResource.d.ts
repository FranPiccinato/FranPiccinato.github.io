import 'cross-fetch/polyfill';
import { Paginated, Query, QueryJoin } from './requests';
export declare type KernexResourceOptions = {
    $join?: QueryJoin[];
};
declare class KernexResource<Resource> {
    private readonly baseUrl;
    readonly apiKey: string;
    private readonly resourceUrl;
    private readonly options;
    constructor(baseUrl: string, apiKey: string, resourceName: string, options?: KernexResourceOptions);
    getQuery<T = Resource>(query?: Query<T>): Query<T> | undefined;
    /**
     * Create a new resource entry
     * @param data
     * @param query
     */
    create<Response = Resource>(data: Partial<Resource>, query?: Query<Resource>): Promise<Response>;
    /**
     * Get a single resource entry
     * @param id
     * @param query
     */
    get<GetResource = Resource>(id: string, query?: Query<GetResource>): Promise<GetResource>;
    /**
     * Find a list of resource entries
     * @param query
     */
    find<FindResource = Resource>(query?: Query<FindResource>): Promise<Paginated<FindResource>>;
    /**
     * Patch a single resource entry
     * @param id
     * @param data
     * @param query
     */
    patch(id: string, data: Partial<Resource>, query?: Query<Resource>): Promise<Resource>;
    /**
     * Update a single resource entry
     * @param id
     * @param data
     * @param query
     */
    update(id: string, data: Partial<Resource>, query?: Query<Resource>): Promise<Resource>;
    /**
     * Remove a single resource entry
     * @param id
     * @param query
     */
    remove(id: string, query?: Query<Resource>): Promise<void>;
    private fetch;
}
export default KernexResource;
