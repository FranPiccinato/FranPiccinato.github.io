"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("cross-fetch/polyfill");
const qs = require("qs");
function getQueryString(query = {}) {
    if (Object.keys(query).length !== 0) {
        return `?${qs.stringify(query)}`;
    }
    return '';
}
function getServerQuery(query) {
    const { $join, ...rest } = query;
    const serverQuery = { ...rest };
    if ($join) {
        serverQuery.$client = { $join };
    }
    return serverQuery;
}
function getUrl(baseUrl, query = {}) {
    return `${baseUrl}${getQueryString(getServerQuery(query))}`;
}
class KernexResource {
    baseUrl;
    apiKey;
    resourceUrl;
    options;
    constructor(baseUrl, apiKey, resourceName, options = {}) {
        this.baseUrl = baseUrl;
        this.apiKey = apiKey;
        this.resourceUrl = `${baseUrl}/resource/${resourceName}`;
        this.options = options;
    }
    getQuery(query = {}) {
        const { $join } = this.options;
        if (Object.keys(query).length === 0 && !$join) {
            return undefined;
        }
        return {
            $join,
            ...query,
        };
    }
    ;
    /**
     * Create a new resource entry
     * @param data
     * @param query
     */
    async create(data, query) {
        return this.fetch(getUrl(this.resourceUrl, this.getQuery(query)), {
            method: 'POST',
            body: JSON.stringify(data),
        });
    }
    /**
     * Get a single resource entry
     * @param id
     * @param query
     */
    async get(id, query) {
        return this.fetch(getUrl(`${this.resourceUrl}/${id}`, this.getQuery(query)), {
            method: 'GET',
        });
    }
    /**
     * Find a list of resource entries
     * @param query
     */
    async find(query) {
        return this.fetch(getUrl(this.resourceUrl, this.getQuery(query)), {
            method: 'GET',
        });
    }
    /**
     * Patch a single resource entry
     * @param id
     * @param data
     * @param query
     */
    async patch(id, data, query) {
        return this.fetch(getUrl(`${this.resourceUrl}/${id}`, this.getQuery(query)), {
            method: 'PATCH',
            body: JSON.stringify(data),
        });
    }
    /**
     * Update a single resource entry
     * @param id
     * @param data
     * @param query
     */
    async update(id, data, query) {
        return this.fetch(getUrl(`${this.resourceUrl}/${id}`, this.getQuery(query)), {
            method: 'PUT',
            body: JSON.stringify(data),
        });
    }
    /**
     * Remove a single resource entry
     * @param id
     * @param query
     */
    async remove(id, query) {
        return this.fetch(getUrl(`${this.resourceUrl}/${id}`, this.getQuery(query)), {
            method: 'DELETE',
        });
    }
    async fetch(resourceUrl = this.resourceUrl, init = {}) {
        const response = await fetch(resourceUrl, {
            ...init,
            headers: {
                ...init.headers,
                'Content-Type': 'application/json',
                'X-Api-Key': this.apiKey,
            },
        });
        const data = await response.json();
        if (!response.ok) {
            throw data;
        }
        return data;
    }
}
exports.default = KernexResource;
